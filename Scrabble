package scrabblemaster;

import java.io.BufferedReader;
 
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class Scrabble {

	private static HashMap<Integer,List<String>> wordScoreList = new HashMap<Integer,List<String>>();
	private static ArrayList<String> wordList = new ArrayList<String>();
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] rack =  new String[7];
		int count = 0;
		for(String arg : args){
			rack[count++] = arg;
		}
		try {
			readDictionary();
			for(String word : createWordList(rack)){
				if(checkInDictionary(word)){
					int score = calcScore(word);
					addToWordScoreList(score,word);
				}
			}
                        Map< Integer, List<String> > sortedWordList = sortHashMap();
                        Set set2 = sortedWordList.entrySet();
                        Iterator iterator = set2.iterator();
                        if(iterator.hasNext()) {
                            Map.Entry wordlist = (Map.Entry)iterator.next();
                            List<String> list = (List<String>) wordlist.getValue();
                            for(int i=0;i< list.size();i++ ){
                                System.out.println(list.get(i) );
            
                             }
                        }
		} catch (IOException e) { 
			e.printStackTrace();
		}
                
//		for(String letter : letters){
//			System.out.println(letter);
//		}
	}
	private static void addToWordScoreList(int score, String word) {
		List<String> wordListWithScore = wordScoreList.get(score);
		if(wordListWithScore == null ){
			List<String> newList = new LinkedList<String>();
			newList.add(word);
			wordScoreList.put(score, newList );
		}
		else{
			if(!wordListWithScore.contains(word)){

				wordListWithScore.add(word);
				wordScoreList.put(score, wordListWithScore );
			}
		}

	}
	private static void readDictionary() throws IOException{
		BufferedReader reader = new BufferedReader(new FileReader("SOWPODS.txt"));
		String line = null;
		while( (line = reader.readLine()) != null){ 
			wordList.add(line);
		}
	}
	public static List<String> createWordList(String[] rack )
        {
                StringBuilder str = new StringBuilder();
                for(int i=0; i< rack.length; i++)
                {
                    str.append(rack[i]);
                }
                ArrayList<String> Allwords = new ArrayList<String>();
                permuteString("", str.toString(), Allwords);
		return Allwords;
	}

   public  static void permuteString(String beginningString, String endingString, ArrayList<String> Allwords)
    {
    if (endingString.length() <= 1)
    {
        Allwords.add(beginningString+endingString);
    }
       
    else
      for (int i = 0; i < endingString.length(); i++) 
      {
        try
        {
          String newString = endingString.substring(0, i) + endingString.substring(i + 1);
          permuteString(beginningString + endingString.charAt(i), newString, Allwords);
        }
        catch (StringIndexOutOfBoundsException exception) 
        {
          exception.printStackTrace();
        }
      }
  }
        
	public static boolean checkInDictionary(String word){
		return wordList.contains(word);
	}


	public static int calcScore(String word){
         int[] worth = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};
         int score = 0;
         for(int i = 0; i < word.length(); i++){
                score += worth[ word.charAt(i) - 'A' ];
            }
          return score; 

	}
        
    public static Map< Integer, List<String> > sortHashMap(){
        Map< Integer, List<String> > map = new TreeMap<Integer, List<String> >(wordScoreList);
        return map;
    }

}
